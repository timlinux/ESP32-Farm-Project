[
    {
        "id": "5c2ad4a20d250b77",
        "type": "tab",
        "label": "ESP32",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b4665f0400f4ee6",
        "type": "tab",
        "label": "Chart to Telegram Examples",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "36c26d10e9b63854",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39702f459454e2db",
        "type": "mqtt-broker",
        "name": "Home NUC PC",
        "broker": "192.168.0.119",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "NodeRed",
        "birthQos": "0",
        "birthPayload": "connected",
        "birthMsg": {},
        "closeTopic": "NodeRed",
        "closeQos": "0",
        "closePayload": "disconnected",
        "closeMsg": {},
        "willTopic": "NodeRed",
        "willQos": "0",
        "willPayload": "unexpected disconnect",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6603cb777e992c24",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "10954a44c54ce339",
        "type": "ui_tab",
        "name": "Logs",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "be856c44573f46a0",
        "type": "ui_group",
        "name": "Pump House",
        "tab": "6603cb777e992c24",
        "order": 1,
        "disp": true,
        "width": 5,
        "collapse": true,
        "className": ""
    },
    {
        "id": "54be17332d277f10",
        "type": "ui_group",
        "name": "Logs",
        "tab": "10954a44c54ce339",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e5b6cec1ec368f19",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Maceira Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c44f1db096b7ea2d",
        "type": "telegram bot",
        "botname": "esp32",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "d833246e4091cdbd",
        "type": "ui_tab",
        "name": "Status",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e1e7edf081a5a35b",
        "type": "ui_group",
        "name": "Status",
        "tab": "d833246e4091cdbd",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "077d1a933b2ff9cf",
        "type": "sqlitedb",
        "db": "/tmp/temperature.db",
        "mode": "RWC"
    },
    {
        "id": "d7901f40.2659d",
        "type": "ui_tab",
        "name": "Charts",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "31817c348299d7ad",
        "type": "mqtt in",
        "z": "5c2ad4a20d250b77",
        "name": "esp32",
        "topic": "esp32",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "39702f459454e2db",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "e996730a164eb3d2",
                "f3c023d4f491eb1c"
            ]
        ]
    },
    {
        "id": "d2043ca5a8d2a65c",
        "type": "mqtt out",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/getStatus",
        "topic": "esp32/getStatus",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "39702f459454e2db",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "22f876fc083a1096",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "name": "Get Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "d2043ca5a8d2a65c"
            ]
        ]
    },
    {
        "id": "e996730a164eb3d2",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "function 1",
        "func": "var log = global.get(\"log\");\nlog = msg.payload + \"<br />\" + log\nglobal.set(\"log\", log);\nmsg.payload = log;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1120,
        "wires": [
            [
                "c761f4d67923022d"
            ]
        ]
    },
    {
        "id": "bb286ef89a852f55",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "function 2",
        "func": "global.set(\"log\", \"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1220,
        "wires": [
            [
                "c761f4d67923022d"
            ]
        ]
    },
    {
        "id": "c2cb4d586c4010b3",
        "type": "mqtt out",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/getTemperature",
        "topic": "esp32/getTemperature",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "39702f459454e2db",
        "x": 520,
        "y": 340,
        "wires": []
    },
    {
        "id": "49a89d22163ec043",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "name": "Get Temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "c2cb4d586c4010b3"
            ]
        ]
    },
    {
        "id": "32ef6ff6da362297",
        "type": "mqtt in",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/touchValue",
        "topic": "esp32/touchValue",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "39702f459454e2db",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "e996730a164eb3d2"
            ]
        ]
    },
    {
        "id": "f3c023d4f491eb1c",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "function 3",
        "func": "var payload = msg.payload;\npayload = payload.replace(\"TEMP==\", \"\")\npayload = parseInt(Number(payload));\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "e534c3e9840a262b",
        "type": "html",
        "z": "5c2ad4a20d250b77",
        "name": "scripts",
        "property": "payload",
        "outproperty": "payload",
        "tag": "script",
        "ret": "html",
        "as": "single",
        "x": 930,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "72e48920db71a6be",
        "type": "http request",
        "z": "5c2ad4a20d250b77",
        "name": "Portugal Fire Risk",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.ipma.pt/en/riscoincendio/rcm.pt/#",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1320,
        "wires": [
            [
                "e534c3e9840a262b"
            ]
        ]
    },
    {
        "id": "3973510e12c16a34",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1320,
        "wires": [
            [
                "72e48920db71a6be"
            ]
        ]
    },
    {
        "id": "182114d34c64fb24",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Telegram message",
        "func": "msg.payload = {\n    chatId: global.get(\"ChatRoomId\"), \n    type:\"photo\", \n    content:\"/tmp/pumphouse-temp.png\", \n    caption:\"Chart caption\"};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 760,
        "wires": [
            [
                "5e5a1178ce794f8c"
            ]
        ]
    },
    {
        "id": "3caba62cb02d7132",
        "type": "file",
        "z": "5c2ad4a20d250b77",
        "name": "Image dump",
        "filename": "/tmp/pumphouse-temp.png",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1290,
        "y": 680,
        "wires": [
            [
                "182114d34c64fb24"
            ]
        ]
    },
    {
        "id": "b8bcb0ba94eb28d2",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Prepare Telegram Line Chart",
        "func": "let lastDay = null;\nlet labels = msg.payload.map(function (data) {\n    let day = new Date(data.x).getDay();\n    let newDay =  day != lastDay;\n    lastDay = day;\n    let hours = new Date(data.x).getHours();\n    if ( newDay )\n    {\n        return new Date(data.x).toLocaleDateString();\n    }\n    return hours;\n});\n\n// Create the chart object\n\nlet m = {\n    type: 'line',\n\n    options: {\n\n        title: {\n            display: true,\n            text: 'Pumphouse Temperatures',\n            parsing: false //because our dates are already epochs\n        },\n        legend: {\n            display: false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display: true,\n                backgroundColor: 'whitesmoke',\n                borderRadius: 1,\n                padding: 1,\n                align: 'right',\n                anchor: function (context) {\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset: 8,\n                formatter: function (value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        },\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'minute'\n                }\n            }\n        }\n    },\n    data: {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Pumphouse Temperatures\",\n                borderColor: 'rgba(57,97,184,0.8)',\n                fill: false,\n                data: msg.payload\n            }\n        ]\n    }\n}\n\n\nmsg.payload = m;\n\nreturn msg;\n\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 560,
        "wires": [
            [
                "e98164b7e68e1355"
            ]
        ]
    },
    {
        "id": "e0596a16218e6ee5",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "d": true,
        "name": "function 4",
        "func": "var message = msg.payload;\nvar payload = {};\npayload.chatId = 595267042;\npayload.type = \"message\";\npayload.content = \"Pump house temperature is \" + message + \"° C\";\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "d4097b632b8395dd",
        "type": "ui_button",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "group": "e1e7edf081a5a35b",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Get Status",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 40,
        "wires": [
            [
                "d2043ca5a8d2a65c"
            ]
        ]
    },
    {
        "id": "6480b8f52fb34afd",
        "type": "ui_button",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "group": "54be17332d277f10",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear Logs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 1220,
        "wires": [
            [
                "bb286ef89a852f55"
            ]
        ]
    },
    {
        "id": "2e6eee68f3b56fcd",
        "type": "ui_button",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "group": "be856c44573f46a0",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Get Temperature",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "c2cb4d586c4010b3",
                "4eda17625efbc956"
            ]
        ]
    },
    {
        "id": "c761f4d67923022d",
        "type": "ui_text",
        "z": "5c2ad4a20d250b77",
        "group": "54be17332d277f10",
        "order": 2,
        "width": 6,
        "height": 12,
        "name": "ESP32 Messages",
        "label": "Messages",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 890,
        "y": 1080,
        "wires": []
    },
    {
        "id": "baa4232e2a75636e",
        "type": "ui_chart",
        "z": "5c2ad4a20d250b77",
        "name": "Pump House Temperature History",
        "group": "be856c44573f46a0",
        "order": 4,
        "width": 5,
        "height": 4,
        "label": "Pump House History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-5",
        "ymax": "50",
        "removeOlder": "10",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1300,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "aa1b3e1dee886278",
        "type": "ui_widget_thermometer",
        "z": "5c2ad4a20d250b77",
        "group": "be856c44573f46a0",
        "order": 3,
        "width": 5,
        "height": 5,
        "name": "Pump House Temperature",
        "title": "Pump House Temp",
        "colorTop": "#2196f3",
        "colorMiddle": "#8bc34a",
        "colorBottom": "#f44336",
        "unit": "°C",
        "scale": "small",
        "minTemp": "-5.0",
        "maxTemp": "50.0",
        "x": 1070,
        "y": 760,
        "wires": []
    },
    {
        "id": "919964e07e374319",
        "type": "telegram receiver",
        "z": "5c2ad4a20d250b77",
        "name": "Telegram Receiver",
        "bot": "c44f1db096b7ea2d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 730,
        "y": 1460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5e5a1178ce794f8c",
        "type": "telegram sender",
        "z": "5c2ad4a20d250b77",
        "name": "Telegram Sender",
        "bot": "c44f1db096b7ea2d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1390,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "e98164b7e68e1355",
        "type": "chart-image",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 1250,
        "y": 600,
        "wires": [
            [
                "3caba62cb02d7132"
            ]
        ]
    },
    {
        "id": "789037887b6c41b4",
        "type": "mqtt out",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/getIP",
        "topic": "esp32/getIP",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "39702f459454e2db",
        "x": 510,
        "y": 1460,
        "wires": []
    },
    {
        "id": "252ebf2359f150fc",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "name": "GET IP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1500,
        "wires": [
            [
                "789037887b6c41b4"
            ]
        ]
    },
    {
        "id": "065c37a076f1d682",
        "type": "ui_button",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "group": "be856c44573f46a0",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Get Controller IP",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "789037887b6c41b4"
            ]
        ]
    },
    {
        "id": "b198c0a2cf11ff9a",
        "type": "mqtt in",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/ip",
        "topic": "esp32/ip",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "39702f459454e2db",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 1580,
        "wires": [
            [
                "f282bd9dab61bb93"
            ]
        ]
    },
    {
        "id": "f282bd9dab61bb93",
        "type": "ui_text",
        "z": "5c2ad4a20d250b77",
        "group": "be856c44573f46a0",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Controller IP",
        "label": "Controller IP",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 490,
        "y": 1580,
        "wires": []
    },
    {
        "id": "1ccee7bcf31eb496",
        "type": "mqtt in",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/status",
        "topic": "esp32/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "39702f459454e2db",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "142556614fcf07be",
                "02bae0beed54c113"
            ]
        ]
    },
    {
        "id": "5c954cbf52b576da",
        "type": "ui_led",
        "z": "5c2ad4a20d250b77",
        "order": 6,
        "group": "e1e7edf081a5a35b",
        "width": 0,
        "height": 0,
        "label": "Pumphouse Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "RAP:0",
                "valueType": "str"
            },
            {
                "color": "#008000",
                "value": "RAP:1",
                "valueType": "str"
            },
            {
                "color": "#241f31",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Pumphouse Status",
        "x": 1110,
        "y": 120,
        "wires": []
    },
    {
        "id": "af29e24001d99f5d",
        "type": "switch",
        "z": "5c2ad4a20d250b77",
        "name": "Check Source",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "RAP",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "RAH",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "5c954cbf52b576da"
            ],
            [
                "785c7f8097f08f16"
            ]
        ]
    },
    {
        "id": "785c7f8097f08f16",
        "type": "ui_led",
        "z": "5c2ad4a20d250b77",
        "order": 7,
        "group": "e1e7edf081a5a35b",
        "width": 0,
        "height": 0,
        "label": "Hub Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "RAH:0",
                "valueType": "str"
            },
            {
                "color": "#008000",
                "value": "RAH:1",
                "valueType": "str"
            },
            {
                "color": "#241f31",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Hub Status",
        "x": 1090,
        "y": 180,
        "wires": []
    },
    {
        "id": "142556614fcf07be",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Clear LEDs",
        "func": "msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 140,
        "wires": [
            [
                "5c954cbf52b576da",
                "785c7f8097f08f16"
            ]
        ]
    },
    {
        "id": "02bae0beed54c113",
        "type": "delay",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 220,
        "wires": [
            [
                "af29e24001d99f5d"
            ]
        ]
    },
    {
        "id": "aa0bdbdc4734bf03",
        "type": "mqtt in",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/status",
        "topic": "esp32/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "39702f459454e2db",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "883eaa94e0b11317",
        "type": "mqtt in",
        "z": "5c2ad4a20d250b77",
        "name": "esp32/temperature",
        "topic": "esp32/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "39702f459454e2db",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 760,
        "wires": [
            [
                "63b92a5789d6af29",
                "920d6b5960a9b709"
            ]
        ]
    },
    {
        "id": "dd4b35ff73b440d4",
        "type": "sqlite",
        "z": "5c2ad4a20d250b77",
        "mydb": "077d1a933b2ff9cf",
        "sqlquery": "fixed",
        "sql": "select \n    value as y, \n    cast(epoch as integer) as x \nfrom \"temperature_logs\" \nwhere device=\"RTP\" \nlimit 720;",
        "name": "Temperatures",
        "x": 760,
        "y": 480,
        "wires": [
            [
                "b8bcb0ba94eb28d2",
                "46163e93729fe0d8"
            ]
        ]
    },
    {
        "id": "d594c336291d52da",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 880,
        "wires": [
            [
                "1fd27f453ea3dfc7"
            ]
        ]
    },
    {
        "id": "950e8a66e0e87da7",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "name": "Get Temeratures from DB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 540,
        "wires": [
            [
                "dd4b35ff73b440d4"
            ]
        ]
    },
    {
        "id": "63b92a5789d6af29",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Insert Temperatures",
        "func": "//device:temperature\nvar payload = msg.payload.split(\":\");\nconst epoch = Date.now();\n//epoch\npayload.push(epoch);\nmsg.topic = `\nINSERT INTO \n    temperature_logs (device, value, epoch) \n    VALUES \n    ($device, \n    $value, \n    $epoch)`;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 760,
        "wires": [
            [
                "e709e46dc1a97f0e"
            ]
        ]
    },
    {
        "id": "e709e46dc1a97f0e",
        "type": "sqlite",
        "z": "5c2ad4a20d250b77",
        "mydb": "077d1a933b2ff9cf",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Temperatures",
        "x": 900,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "4eda17625efbc956",
        "type": "delay",
        "z": "5c2ad4a20d250b77",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 420,
        "wires": [
            [
                "dd4b35ff73b440d4"
            ]
        ]
    },
    {
        "id": "1fd27f453ea3dfc7",
        "type": "sqlite",
        "z": "5c2ad4a20d250b77",
        "mydb": "077d1a933b2ff9cf",
        "sqlquery": "fixed",
        "sql": "CREATE TABLE \"temperature_logs\"(\n    \"id\"\tINTEGER NOT NULL,\n    \"device\"\tTEXT NOT NULL,\n    \"value\"\tREAL NOT NULL,\n    \"epoch\"\tTEXT NOT NULL,\n    PRIMARY KEY(\"id\" AUTOINCREMENT)\n);",
        "name": "Create Temperatures Table",
        "x": 880,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "46163e93729fe0d8",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Prepare Dashboard Chart",
        "func": "var data = msg.payload;\nmsg.payload = [{\n\n    \"series\": [\"Temperature\"],\n    \"data\": [data],\n    \"labels\": [\"Temperature\"]\n}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "baa4232e2a75636e"
            ]
        ]
    },
    {
        "id": "40394d68eacff949",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 820,
        "wires": [
            [
                "593215c501234398"
            ]
        ]
    },
    {
        "id": "593215c501234398",
        "type": "sqlite",
        "z": "5c2ad4a20d250b77",
        "mydb": "077d1a933b2ff9cf",
        "sqlquery": "fixed",
        "sql": "delete from \"temperature_logs\";",
        "name": "Clear Temperatures Table",
        "x": 890,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "55a1af1df3afe1d3",
        "type": "secret",
        "z": "5c2ad4a20d250b77",
        "name": "Telegram Chat ID",
        "x": 610,
        "y": 620,
        "wires": [
            [
                "7b9f5785de7b7061"
            ]
        ]
    },
    {
        "id": "a6a5fe110261833c",
        "type": "inject",
        "z": "5c2ad4a20d250b77",
        "name": "Setup Chat Room Secret on Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 640,
        "wires": [
            [
                "55a1af1df3afe1d3"
            ]
        ]
    },
    {
        "id": "7b9f5785de7b7061",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Set Telegram Chat Global",
        "func": "global.set(\"ChatRoomId\", msg.secret);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "920d6b5960a9b709",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Split Out Temp",
        "func": "var payload = msg.payload.split(\":\");\nmsg.payload = {\n    device: payload[0],\n    temperature: Number(payload[1]),\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": [
            [
                "43059cd1278e6d30"
            ]
        ]
    },
    {
        "id": "43059cd1278e6d30",
        "type": "switch",
        "z": "5c2ad4a20d250b77",
        "name": "Check Device",
        "property": "payload.device",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "RTP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 780,
        "y": 700,
        "wires": [
            [
                "e1f69edbf5796e39"
            ]
        ]
    },
    {
        "id": "e1f69edbf5796e39",
        "type": "function",
        "z": "5c2ad4a20d250b77",
        "name": "Temp as Int",
        "func": "var payload = msg.payload\nmsg.payload = Math.round(payload.temperature);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "aa1b3e1dee886278"
            ]
        ]
    },
    {
        "id": "dce34fa7.56d7d",
        "type": "function",
        "z": "8b4665f0400f4ee6",
        "name": "Vertical Bar Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'bar',\n    options: {\n        title: {\n            display:true,\n            text:'Vertical bar example'\n        },\n        legend: {\n            labels: {\n                // This more specific font property overrides the global property\n                fontSize: 20,\n                fontColor: 'black',\n                family: 'Arial'\n            }\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Sample data\",\n                backgroundColor:'rgba(57,97,184,0.8)',\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            [
                "12d010c4.fc8e3f"
            ]
        ]
    },
    {
        "id": "62271758.c63728",
        "type": "file",
        "z": "8b4665f0400f4ee6",
        "name": "Image dump",
        "filename": "/tmp/test.png",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 240,
        "wires": [
            [
                "18d162d1.33e8ed"
            ]
        ]
    },
    {
        "id": "18d162d1.33e8ed",
        "type": "function",
        "z": "8b4665f0400f4ee6",
        "name": "Telegram message",
        "func": "msg.payload = {\n    chatId: \"595267042\", \n    type:\"photo\", \n    content:\"/tmp/test.png\", \n    caption:\"Chart caption\"};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 160,
        "wires": [
            [
                "f7ea37e0.ae85f8"
            ]
        ]
    },
    {
        "id": "68d737f4.5047f8",
        "type": "inject",
        "z": "8b4665f0400f4ee6",
        "name": "Vertical Bar",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "dce34fa7.56d7d"
            ]
        ]
    },
    {
        "id": "5f624f25.98f38",
        "type": "function",
        "z": "8b4665f0400f4ee6",
        "name": "Vertical Bar Chart 2 series",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'bar',\n    options: {\n        title: {\n            display:true,\n            text:'Vertical bar with 2 data series'\n        },\n        legend: {\n            display:true\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Series 1\",\n                backgroundColor:'rgba(57,97,184,0.8)',\n                data:[]\n            },\n            {\n                label:\"Series 2\",\n                backgroundColor:'rgba(127, 184, 57,0.8)',\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\nlet k = Math.floor(Math.random()*50);\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    k = k + Math.floor(Math.random()*6)-3;\n    m.data.datasets[1].data.push(k);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    let month = \"\" + (d.getMonth() + 1);\n    let day = \"\" + d.getDate();\n    let year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    m.data.labels.push(day + \".\"+month+\".\"+year);\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "89dfcf39.990ca"
            ]
        ]
    },
    {
        "id": "d658d601.f421e8",
        "type": "inject",
        "z": "8b4665f0400f4ee6",
        "name": "Vertical Bar",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "5f624f25.98f38"
            ]
        ]
    },
    {
        "id": "e284de4.fc6a12",
        "type": "function",
        "z": "8b4665f0400f4ee6",
        "name": "Line Chart",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display:true,\n            text:'Line chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Sample data\",\n                borderColor:'rgba(57,97,184,0.8)',\n                fill:false,\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "f7e11042.f96d9"
            ]
        ]
    },
    {
        "id": "f9531538.ab1988",
        "type": "inject",
        "z": "8b4665f0400f4ee6",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "e284de4.fc6a12"
            ]
        ]
    },
    {
        "id": "4bfe6190.6619c",
        "type": "function",
        "z": "8b4665f0400f4ee6",
        "name": "Line Chart 3 series",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'line',\n    options: {\n        title: {\n            display:true,\n            text:'Line chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value) {\n                    return value > 0 ? value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                label:\"Series 1\",\n                borderColor:'rgba(184, 163, 57,0.8)',\n                backgroundColor:'rgba(184, 163, 57,0.1)',\n                fill:true,\n                data:[]\n            },\n            {\n                label:\"Series 2\",\n                borderColor:'rgba(57,97,184,0.8)',\n                fill:false,\n                data:[]\n            },\n            {\n                label:\"Series 3\",\n                borderColor:'rgba(184, 57, 93,0.8)',\n                fill:false,\n                data:[]\n            }\n        ]\n    }\n}\n\nlet l = Math.floor(Math.random()*50);\nlet k = l;\nlet j = l;\n\nfor (let i=0; i<10; i++) {\n    l = l + Math.floor(Math.random()*6)-3;\n    m.data.datasets[0].data.push(l);\n    k = k + Math.floor(Math.random()*6)-3;\n    m.data.datasets[1].data.push(k);\n    j = j + Math.floor(Math.random()*6)-3;\n    m.data.datasets[2].data.push(j);\n    var d = new Date();\n    d.setTime(now.getTime()-1000*60*60*24*(10-i));\n    m.data.labels.push(dL[d.getDay()]+\", \"+getGetOrdinal(d.getDate()));\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 400,
        "wires": [
            [
                "c86b69d5.68d2d8"
            ]
        ]
    },
    {
        "id": "13c25f21.9a6aa1",
        "type": "inject",
        "z": "8b4665f0400f4ee6",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 400,
        "wires": [
            [
                "4bfe6190.6619c"
            ]
        ]
    },
    {
        "id": "d1ca5ba9.da1338",
        "type": "function",
        "z": "8b4665f0400f4ee6",
        "name": "Doughnut example",
        "func": "function getGetOrdinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],\n    v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n }\n\nvar dL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar mL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar mS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\nlet now = new Date();\n\n// Create the chart object\nlet m = {\n    type: 'pie',\n    options: {\n        cutoutPercentage: 50,\n        title: {\n            display:true,\n            text:'Doughnut chart example'\n        },\n        legend: {\n            display:false\n        },\n        chartArea: {\n            backgroundColor: 'white'\n        },\n        plugins: {\n            datalabels: {\n                display:true,\n                backgroundColor:'whitesmoke',\n                borderRadius:1,\n                padding:1,\n                align: 'right',\n                anchor: function(context) {\n                    //node.send({debug:{dataindex:context.dataIndex}});\n                    if (context.dataIndex == context.dataset.data.length - 1) {\n                        return 'center';\n                    } else {\n                        return 'end';\n                    }\n                },\n                offset:8,\n                formatter:function(value, context) {\n                    return value > 0 ? context.chart.data.labels[context.dataIndex]+\": \"+value.toLocaleString() : '';\n                }\n            }\n        }\n    },\n    data: {\n        labels:[],\n        datasets: [\n            {\n                backgroundColor:[],\n                borderColor:\"white\",\n                borderWidth:2,\n                data:[]\n            }\n        ]\n    }\n}\n\n\n\nfor (let i=0; i<12; i++) {\n    m.data.datasets[0].data.push(Math.floor(Math.random()*50));\n    m.data.datasets[0].backgroundColor.push(\"hsl(\"+i*360/12+\",100%,50%)\");\n    m.data.labels.push(mL[i]);\n}\n\nmsg.payload = m;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 480,
        "wires": [
            [
                "4af5b6dc.e60d28"
            ]
        ]
    },
    {
        "id": "493ec7a4.b98fe8",
        "type": "inject",
        "z": "8b4665f0400f4ee6",
        "name": "Line Chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "d1ca5ba9.da1338"
            ]
        ]
    },
    {
        "id": "fac75646.ed0358",
        "type": "change",
        "z": "8b4665f0400f4ee6",
        "name": "Set up the email",
        "rules": [
            {
                "t": "set",
                "p": "attachments",
                "pt": "msg",
                "to": "{}",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "attachments.content",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "attachments.filename",
                "pt": "msg",
                "to": "chart.jpg",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Chart example",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "This is the auto generated chart",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "to",
                "pt": "msg",
                "to": "<to_email_address>",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f7ea37e0.ae85f8",
        "type": "telegram sender",
        "z": "8b4665f0400f4ee6",
        "name": "",
        "bot": "c44f1db096b7ea2d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1210,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "12d010c4.fc8e3f",
        "type": "chart-image",
        "z": "8b4665f0400f4ee6",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "62271758.c63728"
            ]
        ]
    },
    {
        "id": "89dfcf39.990ca",
        "type": "chart-image",
        "z": "8b4665f0400f4ee6",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 550,
        "y": 220,
        "wires": [
            [
                "62271758.c63728"
            ]
        ]
    },
    {
        "id": "f7e11042.f96d9",
        "type": "chart-image",
        "z": "8b4665f0400f4ee6",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "62271758.c63728",
                "fac75646.ed0358"
            ]
        ]
    },
    {
        "id": "c86b69d5.68d2d8",
        "type": "chart-image",
        "z": "8b4665f0400f4ee6",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 510,
        "y": 400,
        "wires": [
            [
                "62271758.c63728"
            ]
        ]
    },
    {
        "id": "4af5b6dc.e60d28",
        "type": "chart-image",
        "z": "8b4665f0400f4ee6",
        "name": "",
        "width": 500,
        "height": "500",
        "x": 510,
        "y": 480,
        "wires": [
            [
                "62271758.c63728"
            ]
        ]
    }
]